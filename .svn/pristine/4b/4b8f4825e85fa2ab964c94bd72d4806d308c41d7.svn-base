package datapro.eibs.beans;

import java.math.BigDecimal;
import java.util.Hashtable;

import datapro.eibs.sockets.CharacterField;
import datapro.eibs.sockets.DecimalField;
import datapro.eibs.sockets.MessageField;
import datapro.eibs.sockets.MessageRecord;

/**
* Class generated by AS/400 CRTCLASS command from CRF003702 physical file definition.
* 
* File level identifier is 1090313115906.
* Record format level identifier is 55ED1E2281991.
*/

public class CRF003702Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "E02ACC",
                                     "E02FAP",
                                     "E02CON",
                                     "E02MAP",
                                     "E02MPA",
                                     "E02FPA",
                                     "E02EST"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "E02ACC",
                                   "E02FAP",
                                   "E02CON",
                                   "E02MAP",
                                   "E02MPA",
                                   "E02FPA",
                                   "E02EST"
                                 };
  final static String fid = "1090313115906";
  final static String rid = "55ED1E2281991";
  final static String fmtname = "CRF003702";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private DecimalField fieldE02ACC = null;
  private DecimalField fieldE02FAP = null;
  private CharacterField fieldE02CON = null;
  private DecimalField fieldE02MAP = null;
  private DecimalField fieldE02MPA = null;
  private DecimalField fieldE02FPA = null;
  private CharacterField fieldE02EST = null;

  /**
  * Constructor for CRF003702Message.
  */
  public CRF003702Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 112;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldE02ACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E02ACC");
    fields[10] = fieldE02FAP =
    new DecimalField(message, HEADERSIZE + 55, 9, 0, "E02FAP");
    fields[11] = fieldE02CON =
    new CharacterField(message, HEADERSIZE + 64, 4, "E02CON");
    fields[12] = fieldE02MAP =
    new DecimalField(message, HEADERSIZE + 68, 17, 2, "E02MAP");
    fields[13] = fieldE02MPA =
    new DecimalField(message, HEADERSIZE + 85, 17, 2, "E02MPA");
    fields[14] = fieldE02FPA =
    new DecimalField(message, HEADERSIZE + 102, 9, 0, "E02FPA");
    fields[15] = fieldE02EST =
    new CharacterField(message, HEADERSIZE + 111, 1, "E02EST");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field E02ACC using a String value.
  */
  public void setE02ACC(String newvalue)
  {
    fieldE02ACC.setString(newvalue);
  }

  /**
  * Get value of field E02ACC as a String.
  */
  public String getE02ACC()
  {
    return fieldE02ACC.getString();
  }

  /**
  * Set numeric field E02ACC using a BigDecimal value.
  */
  public void setE02ACC(BigDecimal newvalue)
  {
    fieldE02ACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02ACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02ACC()
  {
    return fieldE02ACC.getBigDecimal();
  }

  /**
  * Set field E02FAP using a String value.
  */
  public void setE02FAP(String newvalue)
  {
    fieldE02FAP.setString(newvalue);
  }

  /**
  * Get value of field E02FAP as a String.
  */
  public String getE02FAP()
  {
    return fieldE02FAP.getString();
  }

  /**
  * Set numeric field E02FAP using a BigDecimal value.
  */
  public void setE02FAP(BigDecimal newvalue)
  {
    fieldE02FAP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02FAP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02FAP()
  {
    return fieldE02FAP.getBigDecimal();
  }

  /**
  * Set field E02CON using a String value.
  */
  public void setE02CON(String newvalue)
  {
    fieldE02CON.setString(newvalue);
  }

  /**
  * Get value of field E02CON as a String.
  */
  public String getE02CON()
  {
    return fieldE02CON.getString();
  }

  /**
  * Set field E02MAP using a String value.
  */
  public void setE02MAP(String newvalue)
  {
    fieldE02MAP.setString(newvalue);
  }

  /**
  * Get value of field E02MAP as a String.
  */
  public String getE02MAP()
  {
    return fieldE02MAP.getString();
  }

  /**
  * Set numeric field E02MAP using a BigDecimal value.
  */
  public void setE02MAP(BigDecimal newvalue)
  {
    fieldE02MAP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02MAP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02MAP()
  {
    return fieldE02MAP.getBigDecimal();
  }

  /**
  * Set field E02MPA using a String value.
  */
  public void setE02MPA(String newvalue)
  {
    fieldE02MPA.setString(newvalue);
  }

  /**
  * Get value of field E02MPA as a String.
  */
  public String getE02MPA()
  {
    return fieldE02MPA.getString();
  }

  /**
  * Set numeric field E02MPA using a BigDecimal value.
  */
  public void setE02MPA(BigDecimal newvalue)
  {
    fieldE02MPA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02MPA as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02MPA()
  {
    return fieldE02MPA.getBigDecimal();
  }

  /**
  * Set field E02FPA using a String value.
  */
  public void setE02FPA(String newvalue)
  {
    fieldE02FPA.setString(newvalue);
  }

  /**
  * Get value of field E02FPA as a String.
  */
  public String getE02FPA()
  {
    return fieldE02FPA.getString();
  }

  /**
  * Set numeric field E02FPA using a BigDecimal value.
  */
  public void setE02FPA(BigDecimal newvalue)
  {
    fieldE02FPA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02FPA as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02FPA()
  {
    return fieldE02FPA.getBigDecimal();
  }

  /**
  * Set field E02EST using a String value.
  */
  public void setE02EST(String newvalue)
  {
    fieldE02EST.setString(newvalue);
  }

  /**
  * Get value of field E02EST as a String.
  */
  public String getE02EST()
  {
    return fieldE02EST.getString();
  }

}
